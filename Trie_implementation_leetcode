class TrieNode{
    public:
    char val;
    vector<TrieNode*>children;
    bool isTerminal;
    TrieNode(char val){
        this->val = val;
        children.resize(26);
        for(int i=0;i<26;i++){
            children[i] = NULL;
        }
        this->isTerminal = false;
    }
};
class Trie {
public:
    TrieNode * root = NULL;
    void insetUtil(TrieNode * root , string &word , int i){
        if(i>=word.size()){
            root->isTerminal = true;
            return;
        }
        int index = word[i] - 'a';
        if(!root->children[index]){
            root->children[index] = new TrieNode(word[i]);
        }

        insetUtil(root->children[index] , word,i+1);

    }
    bool searchUtil(TrieNode * root , string & word , int i){
        if(i>=word.size()){
           return  root->isTerminal;
        }
        int index = word[i] - 'a';
        if(root->children[index]){
            return searchUtil(root->children[index],word,i+1);
        }
        
        return false;
        
    }
    bool startUtil(TrieNode * root , string &word , int i){
        if(i>=word.size()){
            return true;
        }
        int index = word[i] - 'a';
        if(root->children[index]){
            return startUtil(root->children[index],word,i+1);
        }
        return false;
    }
    Trie() {
        root = new TrieNode('_');
    }
    
    void insert(string word) {
        insetUtil(root,word,0);
    }
    
    bool search(string word) {
        bool ans =   searchUtil(root,word,0);
        return ans;
    }
    
    bool startsWith(string prefix) {
        bool ans = startUtil(root,prefix,0);
        return ans;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
